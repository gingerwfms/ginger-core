<?php

namespace Ginger\Core\Repository\Adapter;

use Ginger\Test\TestCase;
use Ginger\Core\Repository\Resource;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-17 at 16:48:01.
 */
class MongoDbCrudRepositoryAdapterTest extends TestCase
{

    /**
     * @var MongoDbCrudRepositoryAdapter
     */
    protected $object;
    
    /**
     *
     * @var \MongoClient
     */
    protected $mongoClient;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mongoClient = new \MongoClient(); 
        
        $this->object = new MongoDbCrudRepositoryAdapter('gingerwfms-test');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->mongoClient->selectDB('gingerwfms-test')->drop();
    }

    /**
     * @covers Ginger\Core\Repository\Adapter\MongoDbCrudRepositoryAdapter::createResource
     */
    public function testCreateResource()
    {
        $resourceType = new Resource\ResourceType('workflow');
        $resourceData = new Resource\ResourceData();
        $resourceData->setData(array('name' => 'DataTransfer'));
        
        $resourceId = $this->object->createResource($resourceType, $resourceData);
        
        $this->assertInstanceOf('Ginger\Core\Repository\Resource\ResourceId', $resourceId);
        $this->assertNotEmpty($resourceId->getValue());
    }

    /**
     * @covers Ginger\Core\Repository\Adapter\MongoDbCrudRepositoryAdapter::deleteResource
     */
    public function testDeleteResource()
    {
        $resourceType = new Resource\ResourceType('workflow');
        $resourceData = new Resource\ResourceData();
        $resourceData->setData(array('name' => 'DataTransfer'));
        
        $resourceId = $this->object->createResource($resourceType, $resourceData);
        
        $this->object->deleteResource($resourceType, $resourceId);
        
        //If no exception was thrown, deletion of resource was successful
        $this->assertTrue(true);
    }

    /**
     * @covers Ginger\Core\Repository\Adapter\MongoDbCrudRepositoryAdapter::getResource
     */
    public function testGetResource()
    {
        $resourceType = new Resource\ResourceType('workflow');
        $resourceData = new Resource\ResourceData();
        $resourceData->setData(array('name' => 'DataTransfer'));
        
        $resourceId = $this->object->createResource($resourceType, $resourceData);
        
        $resourceData = $this->object->getResource($resourceType, $resourceId);
        
        $this->assertInstanceOf('Ginger\Core\Repository\Resource\ResourceData', $resourceData);
        $this->assertEquals($resourceId->getValue(), $resourceData->getResourceId()->getValue());
        $this->assertEquals(array('name' => 'DataTransfer'), $resourceData->getData());
    }

    /**
     * @covers Ginger\Core\Repository\Adapter\MongoDbCrudRepositoryAdapter::getResources
     */
    public function testGetResources()
    {
        $resourceType = new Resource\ResourceType('workflow');
        $resourceData = new Resource\ResourceData();
        $resourceData->setData(array('name' => 'DataTransfer'));
        
        $resourceId1 = $this->object->createResource($resourceType, $resourceData);
        
        $resourceData = new Resource\ResourceData();
        $resourceData->setData(array('name' => 'FileUpload'));
        
        $resourceId2 = $this->object->createResource($resourceType, $resourceData);
        
        $resources = $this->object->getResources($resourceType);
        
        $resourceData1 = $resources[0];
        
        $this->assertInstanceOf('Ginger\Core\Repository\Resource\ResourceData', $resourceData1);
        $this->assertEquals($resourceId1->getValue(), $resourceData1->getResourceId()->getValue());
        $this->assertEquals(array('name' => 'DataTransfer'), $resourceData1->getData());
        
        $resourceData2 = $resources[1];
        
        $this->assertInstanceOf('Ginger\Core\Repository\Resource\ResourceData', $resourceData2);
        $this->assertEquals($resourceId2->getValue(), $resourceData2->getResourceId()->getValue());
        $this->assertEquals(array('name' => 'FileUpload'), $resourceData2->getData());
    }

    /**
     * @covers Ginger\Core\Repository\Adapter\MongoDbCrudRepositoryAdapter::updateResource
     */
    public function testUpdateResource()
    {
        $resourceType = new Resource\ResourceType('workflow');
        $resourceData = new Resource\ResourceData();
        $resourceData->setData(array('name' => 'DataTransfer', 'desc' => 'simple data transfer'));
        
        $resourceId = $this->object->createResource($resourceType, $resourceData);
        
        $resourceData = new Resource\ResourceData($resourceId);
        $resourceData->setData(array('name' => 'FileUpload'));
        
        $resourceData = $this->object->updateResource($resourceType, $resourceData);
        
        $this->assertInstanceOf('Ginger\Core\Repository\Resource\ResourceData', $resourceData);
        $this->assertEquals($resourceId->getValue(), $resourceData->getResourceId()->getValue());
        $this->assertEquals(
            array(
                'name' => 'FileUpload', 
                'desc' => 'simple data transfer'
            ), 
            $resourceData->getData()
        );
    }

}
